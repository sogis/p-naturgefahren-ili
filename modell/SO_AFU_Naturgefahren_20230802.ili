INTERLIS 2.3;

/* 
 ------------------------------------------------------------------------------
  Version    | wer   | Aenderung
 ------------------------------------------------------------------------------
  2022-01-01 | geo7  | Erstellung Fachmodell
  2022-07-31 | GeoW  | Review und Optimierung fuer QGIS-Einsatz 
  2022-09-22 | GeoW  | OID Deklaration Teilauftraege ergänzt, Constraints: Methodennamen korrigiert
  2022-11-24 | GeoW  | OID in TeilauftragRaumbezug auf ANYOID gesetzt, Kommentare bereinigt, 
                       Constraints deklarativ eingefuegt
  2022-11-30 | jek   | Modellname mit _Pilot_ ergänzt, Datum aktualisiert.
  2023-08-02 | jek   | Anpassungen gemäss Erkenntnissen aus Pilot Himmelried.
 ==============================================================================
*/
!!@ technicalContact=mailto:agi@bd.so.ch
MODEL SO_AFU_Naturgefahren_20230802 (de) 
  AT "http://geo.so.ch/models/AFU" VERSION "2023-08-02" =

  IMPORTS UNQUALIFIED Units, Time, CoordSys;
  IMPORTS GeometryCHLV95_V1;
  IMPORTS GeoW_FunctionsExt, INTERLIS_ext;

  DOMAIN

    Jaehrlichkeit = 0 .. 9999999;
    JaehrlichkeitRestgefaehrdung = 300 .. 9999999;
    JaehrlichkeitListe = (J_30,J_100,J_300,Restgefaehrdung);
    Einzelflaeche = SURFACE WITH (STRAIGHTS) VERTEX GeometryCHLV95_V1.Coord2 WITHOUT OVERLAPS > 0.1;

    /* Beschreibung des Auftrags. Hier wird definiert,
      - wer bestellt (Auftraggeber, z.B. Kanton)
      - bei wem (Auftragnehmer =  Buero)
      - fuer welches Gebiet (hier nur: Abklaerungsperimeter, Prozessquelle wird unter Befunde definiert)
      - welche Produkte (Nachfuehrung, GKnM, etc.)
      - welche Teilprozesse und Szenarien (Grundszenarien, freie Jaehrlichkeiten, etc.)
      Der Auftragnehmer muss am Ende des Auftrages im Abklaerungsperimeter deklarieren, bis zu welchem Grad die Beurteilung vorgenommen wurde. */
    TOPIC Auftraege =

    DOMAIN
      !! Werte fuer Deklaration der Beurteilung
      Beurteilungsart = (
        nicht_beurteilt,
        beurteilung_nicht_noetig,
        beurteilt_und_vollstaendig,
        beurteilt_und_nicht_vollstaendig,
        beurteilt_und_nicht_bestimmbar,
        beurteilt_und_in_abklaerung
      ) ORDERED;

      !! Wertebereiche fuer Prozessquellenbeschreibung Hauptprozesse
      Hauptprozess = (
        Wasser,
        Rutschung,
        Sturz,
        Absenkung_Einsturz
      );

      !! Wertebereich fuer Teilprozesse der Hauptprozesse Rutsch und Sturz
      TeilprozessRutschSturz = (
        spontane_Rutschung,
        Hangmure,
        Stein_Blockschlag,
        Fels_Bergsturz
      );

      !! Art der Nachfuehrung der Gefahrenkarte
      Deklaration = (
        Nachfuehrung,
        Beurteilung_nach_Massnahmen,
        Neubeurteilung
      ) ORDERED;

    !! Auftragnehmer, Buero welches fuer Auftrag/Befund verantwortlich ist
    CLASS Autor =
      !! Name des Bueros
      Buero : MANDATORY TEXT*80;
      !! Standort des Bueros/Filiale, welche den Auftrag abwickelt 
      Filiale : MANDATORY TEXT*80;
    END Autor;

    CLASS Auftrag =
      !! Eindeutige Bezeichnung des Auftrags. Beispiel: 128_Himmelried_Wasser_Sturz_2008 
      Kennung : MANDATORY TEXT*80;
      !! Auftraggeber 
      Fachstelle : MANDATORY TEXT*80;
      !! Jahr, in welchem der Auftrag abgeschlossen wurde.
      Abschlussjahr : MANDATORY 1970 .. 2050;
      !! Art der Gefahrenbeurteilung -> siehe Wertebereich Deklarationen
      Deklaration : MANDATORY Deklaration;
      Bemerkung : MTEXT*255;
      !!@ name = "CheckAuftragEintrag"
      !!@ ilivalid.msg_de = "Die Klasse Auftrag bedingt mindestens 1 Eintrag!"  
      SET CONSTRAINT INTERLIS.objectCount(THIS)>=1;
      !!@ name = "CheckAuftragKennungen"
      !!@ ilivalid.msg_de = "Es gibt mehrere identische Kennungen!"  
      UNIQUE Kennung;
    END Auftrag;

    CLASS Bericht = 
      !! Bezeichnung des Berichts (z.B. Technischer Bericht, Anhang, etc.) 
      Bericht : MANDATORY TEXT*80;
      !! Dateiname des Berichts inkl. Datum im Format YYYYMMDD 
      Dateiname: MANDATORY TEXT*100;
    END Bericht;

    /* 
      Mit dem Teilauftrag wird der entsprechende Hauptprozess einwirkungs- oder prozessquellenorientiert beurteilt.
      Ein einwirkungsorientierter Teilauftrag beurteilt alle fuer den Einwirkungsraum relevanten Prozessquellen.
      Die prozessquellenorientierte Beurteilung benennt explizit die zu beurteilenden Prozessquellen. Diese "alten"  
      Prozessquellen werden beim Datenabgleich automatisch durch die neu beurteilten ersetzt.
    */
    CLASS Teilauftrag =
      !! Im Teilauftrag abgeklärter Hauptprozess. Abgeklärte Teilprozesse siehe Abklärungsperimeter.
      Hauptprozess : MANDATORY Hauptprozess;
      Bemerkung : MTEXT*255;
      !! Abklaerungsperimeter = Perimeter, welcher untersucht werden soll 
      Name : MANDATORY TEXT*80;
      !! True, falls fuer Wasser-Teilauftrag die Kennwerte gemäss Modell geliefert werden.
      Wasserkennwerte: MANDATORY BOOLEAN;
      !! Fuer Ausnahmefall der Abklärung einer freien Jährlichkeit mittels Klasse BefundeJaehrlichkeit ist hier
      !! die abzuklärende Jährlichkeit gesetzt. Im Normallfall NULL.
      Jaehrlichkeit : Jaehrlichkeit;
      !!@ name = "CheckTeilauftragWasserKennwert"
      !!@ ilivalid.msg_de = "Bei einem Teilauftrag mit Hauptprozess 'Wasser' muessen Kennwerte geliefert werden!" 
      MANDATORY CONSTRAINT (Hauptprozess != #Wasser) OR Wasserkennwerte;
    END Teilauftrag;

    /* 
    1-n Perimeter, fuer welche die Einwirkungen der Teilprozesse gemäss Beurteilungsart
    abgeklärt wurde. Im einfachsten Fall wird nur ein einziger Perimeter erfasst, welcher 
    den Teilaufträgen (Hauptprozesse) zugewiesen ist. Die Beurteilungsart ist fuer alle
    Teilprozesse angegeben.
    Bsp. komplexer Fall: Fuer ein Aussenquartier muessen lediglich die Wassergefahren geklärt 
    werden. Folglich mehrere Perimeter im Auftrag. Der "Aussenquartier-Perimeter" ist lediglich
    dem Teilauftrag mit Hauptprozess=Wasser zugeordnet. Er hat nur die Beurteilungen der 
    Wasser-Teilprozesse ausgefuellt. Fuer alle Gefahren der anderen Hauptprozesse folgt 
    im "Aussenquartier-Perimeter" implizit die Beurteilungsart "nicht beurteilt".
    */
    CLASS Abklaerungsperimeter =
      Geometrie : MANDATORY Einzelflaeche;
      w_Ueberschwemmung_statisch : Beurteilungsart;
      w_Ueberschwemmung_dynamisch : Beurteilungsart;
      w_Uebermurung : Beurteilungsart;
      w_Ufererosion : Beurteilungsart;
      ea_Einsturz : Beurteilungsart;
      ea_Absenkung : Beurteilungsart;
      s_Stein_Blockschlag : Beurteilungsart;
      s_Berg_Felssturz : Beurteilungsart;
      r_Hangmure : Beurteilungsart;
      r_Spontane_Rutschung : Beurteilungsart;
      r_Permanente_Rutschung : Beurteilungsart;
      !! Dient "nur" der Perimeter-Anzeige als Text zwecks editieren der Beziehung zum Teilauftrag. 
      Bezeichnung: TEXT*80;
      Bemerkung : MTEXT*255;
      !!@ name = "CheckAbklperimeterFlaechenGroesse"
      !!@ ilivalid.msg_de = "Der Abklärungsperimeter muss groesser als 100m2 sein!"  
      MANDATORY CONSTRAINT GeoW_FunctionsExt.GetArea(THIS,"Geometrie") > 100;
      !!@ name = "CheckAbklperimeterInnerhalbSO"
      !!@ ilivalid.msg_de = "Der Abklärungsperimeter muss innerhalb des Kantons liegen!"  
      !!MANDATORY CONSTRAINT GeoW_FunctionsExt.IsInsideExternalDatasetResource("ch.so.agi.av.hoheitsgrenzen.xtf", "SO_Hoheitsgrenzen_Publikation_20170626.Hoheitsgrenzen.Kantonsgrenze", "c6db23e0-0536-4055-a50c-11d2d1e4c6ef" ,THIS, "Geometrie");
      MANDATORY CONSTRAINT GeoW_FunctionsExt.IsInsideExternalDataset("SO_Hoheitsgrenzen_Publikation_20170626.Hoheitsgrenzen.Kantonsgrenze.Geometrie", "c6db23e0-0536-4055-a50c-11d2d1e4c6ef" ,THIS, "Geometrie"); 
      !!@ name = "CheckAbklperimeterKeineLoecher"
      !!@ ilivalid.msg_de = "In der Abklärungsperimeter-Geometrie sind keine Loecher erlaubt!"    
      MANDATORY CONSTRAINT GeoW_FunctionsExt.GetInnerRingsCount(THIS,  "Geometrie") == 0; 
    END Abklaerungsperimeter;

    ASSOCIATION Auftrag__Teilauftrag =
      Teilauftrag_R -- {1..*} Teilauftrag;
      Auftrag_R -<> {1} Auftrag;
    END Auftrag__Teilauftrag;

    ASSOCIATION Auftrag__Bericht =
      Bericht_R -- {1..*} Bericht;
      Auftrag_R -<> {1} Auftrag;
    END Auftrag__Bericht;

    ASSOCIATION Teilauftrag__Autor =
      Teilauftrag_R -- {1..*} Teilauftrag;
      Autor_R -- {1} Autor;
    END Teilauftrag__Autor;

    ASSOCIATION Abklaerungsperimeter__Teilauftrag =
      Abklaerungsperimeter_R -- {1..*} Abklaerungsperimeter;
      Teilauftrag_R -- {1..*} Teilauftrag;
    END Abklaerungsperimeter__Teilauftrag;

    CONSTRAINTS OF Teilauftrag =
      !!@ name = "CheckTeilauftragEindeutigkeit"
      !!@ ilivalid.msg_de = "Zu diesem Auftrag gibt es bereits einen Teilauftrag mit demselben Hauptprozess!" 
      UNIQUE Auftrag_R, Hauptprozess;
    END;

    CONSTRAINTS OF Abklaerungsperimeter =
      !!@ name = "CheckAbklperimeterBeurteilungUeberschwemmung_statisch"
      !!@ ilivalid.msg_de = "Teilprozess Beurteilung 'w_Ueberschwemmung_statisch' muss bei diesem Hauptprozess zwingend ausgefuellt werden!" 
      MANDATORY CONSTRAINT NOT(Teilauftrag_R->Hauptprozess == #Wasser) OR DEFINED(w_Ueberschwemmung_statisch);
      !!@ name = "CheckAbklperimeterBeurteilungUeberschwemmung_dynamisch"
      !!@ ilivalid.msg_de = "Teilprozess Beurteilung 'w_Ueberschwemmung_dynamisch' muss bei diesem Hauptprozess zwingend ausgefuellt werden!" 
      MANDATORY CONSTRAINT NOT(Teilauftrag_R->Hauptprozess == #Wasser) OR DEFINED(w_Ueberschwemmung_dynamisch);
      !!@ name = "CheckAbklperimeterBeurteilungUebermurung"
      !!@ ilivalid.msg_de = "Teilprozess Beurteilung 'w_Uebermurung' muss bei diesem Hauptprozess zwingend ausgefuellt werden!" 
      MANDATORY CONSTRAINT NOT(Teilauftrag_R->Hauptprozess == #Wasser) OR DEFINED(w_Uebermurung);
      !!@ name = "CheckAbklperimeterBeurteilungUfererosion"
      !!@ ilivalid.msg_de = "Teilprozess Beurteilung 'w_Ufererosion' muss bei diesem Hauptprozess zwingend ausgefuellt werden!" 
      MANDATORY CONSTRAINT NOT(Teilauftrag_R->Hauptprozess == #Wasser) OR DEFINED(w_Ufererosion);
      !!@ name = "CheckAbklperimeterBeurteilungEinsturz"
      !!@ ilivalid.msg_de = "Teilprozess Beurteilung 'ea_Einsturz' muss bei diesem Hauptprozess zwingend ausgefuellt werden!" 
      MANDATORY CONSTRAINT NOT(Teilauftrag_R->Hauptprozess == #Absenkung_Einsturz) OR DEFINED(ea_Einsturz);
      !!@ name = "CheckAbklperimeterBeurteilungAbsenkung"
      !!@ ilivalid.msg_de = "Teilprozess Beurteilung 'ea_Absenkung' muss bei diesem Hauptprozess zwingend ausgefuellt werden!" 
      MANDATORY CONSTRAINT NOT(Teilauftrag_R->Hauptprozess == #Absenkung_Einsturz) OR DEFINED(ea_Absenkung);
      !!@ name = "CheckAbklperimeterBeurteilungSteinBlockschlag"
      !!@ ilivalid.msg_de = "Teilprozess Beurteilung 's_Stein_Blockschlag' muss bei diesem Hauptprozess zwingend ausgefuellt werden!" 
      MANDATORY CONSTRAINT NOT(Teilauftrag_R->Hauptprozess == #Sturz) OR DEFINED(s_Stein_Blockschlag);
      !!@ name = "CheckAbklperimeterBeurteilungBerg_Felssturz"
      !!@ ilivalid.msg_de = "Teilprozess Beurteilung 's_Berg_Felssturz' muss bei diesem Hauptprozess zwingend ausgefuellt werden!" 
      MANDATORY CONSTRAINT NOT(Teilauftrag_R->Hauptprozess == #Sturz) OR DEFINED(s_Berg_Felssturz);
      !!@ name = "CheckAbklperimeterBeurteilungHangmure"
      !!@ ilivalid.msg_de = "Teilprozess Beurteilung 'r_Hangmure' muss bei diesem Hauptprozess zwingend ausgefuellt werden!" 
      MANDATORY CONSTRAINT NOT(Teilauftrag_R->Hauptprozess == #Rutschung) OR DEFINED(r_Hangmure);
      !!@ name = "CheckAbklperimeterBeurteilungSpontaneRutschung"
      !!@ ilivalid.msg_de = "Teilprozess Beurteilung 'r_Spontane_Rutschung' muss bei diesem Hauptprozess zwingend ausgefuellt werden!" 
      MANDATORY CONSTRAINT NOT(Teilauftrag_R->Hauptprozess == #Rutschung) OR DEFINED(r_Spontane_Rutschung);
      !!@ name = "CheckAbklperimeterBeurteilungPermanenteRutschung"
      !!@ ilivalid.msg_de = "Teilprozess Beurteilung 'r_Permanente_Rutschung' muss bei diesem Hauptprozess zwingend ausgefuellt werden!" 
      MANDATORY CONSTRAINT NOT(Teilauftrag_R->Hauptprozess == #Rutschung) OR DEFINED(r_Permanente_Rutschung);
    END;

  END Auftraege;

  /* Im TOPIC Befunde werden die Prozessquellen definiert und die Befunde der Gefahrenbeurteilungen gespeichert. 
     Pro Teilprozess wird je eine eigene Klasse zur Verfuegung gestellt. 
     Fuer die Teilprozesse Ueberschwemmung und Uebermurung koennen zusaetzlich Kennwerte in eigenen Klassen gespeichert werden. 
     Fuer Prozesse mit einer Jaehrlichkeit koennen auch Szenarien mit freier Jaehrlichkeit gespeichert werden. */
  TOPIC Befunde =
    DEPENDS ON Auftraege;

    DOMAIN

      !! Wertebereiche fuer Prozessquellenbeschreibung Teilprozesse
      Teilprozess = (
        Ueberschwemmung_statisch,
        Ueberschwemmung_dynamisch,
        Uebermurung,
        Ufererosion,
        spontane_Rutschung,
        Hangmure,
        permanente_Rutschung,
        Stein_Blockschlag,
        Fels_Bergsturz,     
        Einsturz,
        Absenkung        
      ) ORDERED;
     
      !! Wertebereich fuer Prozessquellenbeschreibung fuer Prozess Stein/Blockschlag und Berg/Felssturz
      AspektForm = (
        zylindrisch,
        kubisch,
        plattig,
        tetraedrisch
      );

      !! Wertebereich fuer Befunde mit Jaehrlichkeiten --> Intensitaet 
        Intensitaet = (
        schwach,
        mittel,
        stark
        ) ORDERED;

      !! Wertebereiche fuer Prozess Rutsch: Beschleunigung 
        rBeschleunigung = (
        keine,
        !!< 2fach Mittelwert von v 
        gering,
        !!2fach bis 5fach Mittelwert von v 
        mittel,
        !!> 5fach Mittelwert von v 
        stark
        ) ORDERED;

      !! Wertebereich fuer Prozess Rutsch: Differentialbewegung 
      rDifferentialbewegung = (
        keine,
        !! bis 2 cm/Jahr/10m 
        gering,
        !! groesser 2 cm/Jahr/10m 
        hoch
      ) ORDERED;

      !! Wertebereich fuer Prozess Rutsch: Korrektur 
      rKorrektur = (
        keine,
        Entschaerfung1,
        Verschaerfung1,
        Verschaerfung2
      ) ORDERED;

      !! Wertebereich Rutschgeschwindigkeit 
      rRutschgeschwindigkeit = (
        keine,
        !! 0-2 cm/Jahr 
        substabil,
        !! 2-10 cm/Jahr 
        wenig_aktiv,
        !! > 10 cm/Jahr 
        aktiv
      ) ORDERED;

      !! Wertebereich fuer Prozess Rutsch: Tiefe Gleitflaeche 
      rTiefeGleitflaeche = (
        keine,
        !! oberflaechlich: Tiefe 0 < t <= 2 m 
        oberflaechlich,
        !! mitteltief: Tiefe 2 < t <= 10 m 
        mitteltief,
        !! tief: Tiefe 10 < t <= 40 m 
        tief,
        !! sehr tief: Tiefe t > 40m 
        sehr_tief,
        !! unbestimmt: Tiefe t <= 40 m 
        unbestimmt
      ) ORDERED;
     
      !! Wertebereich fuer Teilprozess Ueberschwemmung: Fliesstiefe [cm]
      wFliesstiefeUeberschwemmung = (
        von_0_bis_25_cm,
        von_25_bis_50_cm,
        von_50_bis_75_cm,
        von_75_bis_100_cm,
        von_100_bis_125_cm,
        von_125_bis_150_cm,
        von_150_bis_175_cm,
        von_175_bis_200_cm,
        von_200_bis_300_cm,
        von_300_bis_400_cm,
        mehr_als_400_cm
      ) ORDERED;

      !! Wertebereich fuer Teilprozess Uebermurung: Fliesstiefe [cm]
      wFliesstiefeUebermurung = (
        bis_100_cm,
        mehr_als_100_cm
      ) ORDERED;

      !! Standardwertebereich fuer Teilprozess Uebermurung: Fliessgeschwindigkeit [m/s] 
      wUebermurungFliessgeschwindigkeit = (
        bis_1_m_s,
        mehr_als_1_m_s
      ) ORDERED;

      !! Standard Wertebereich fuer Prozess Ueberschwemmung: Fliessgeschwindigkeit [m/s]
      wUeberschwemmungFliessgeschwindigkeit = (
        von_0_bis_0_5_m_s,
        von_0_5_bis_1_m_s,
        von_1_bis_2_m_s,
        von_2_bis_3_m_s,
        von_3_bis_4_m_s,
        von_4_bis_5_m_s,
        mehr_als_5_m_s
      ) ORDERED;
 
      /* Wertebereich fuer Teilprozesse Ueberschwemmung statisch & dynamisch, Spontane Rutschung;
         Restgefaehrdung mit Intensitaeten;*/
      IWCodeStandard = (
        rot_stark_30,
        rot_stark_100,
        rot_stark_300,
        rot_mittel_30,

        blau_mittel_30,
        blau_mittel_100,
        blau_mittel_300,
        gelb_mittel_300,
        
        blau_schwach_30,
        blau_schwach_100,
        gelb_schwach_100,
        gelb_schwach_300,

        restgefaehrdung_stark,
        restgefaehrdung_mittel,
        restgefaehrdung_schwach
      ) ORDERED;

      /* Wertebereich fuer Steinschlag und Blockschlag;
      Restgefaehrdung mit Intensitaeten;*/
      IWCodeSteinBlockschlag = (
          rot_stark_30,
          rot_stark_100,
          rot_stark_300,
          rot_mittel_30,
  
          blau_mittel_100,
          blau_mittel_300,
                    
          blau_schwach_30,
          blau_schwach_100,
          gelb_schwach_300,
  
          restgefaehrdung_stark,
          restgefaehrdung_mittel,
          restgefaehrdung_schwach
        ) ORDERED;

      !! Wertebereich fuer Teilprozess: Uebermurung 
      IWCodeUebermurung = (
        rot_stark_30,
        rot_stark_100,
        rot_stark_300,

        rot_mittel_30,
        blau_mittel_100,
        blau_mittel_300,

        restgefaehrdung_stark,		
        restgefaehrdung_mittel
        ) ORDERED;

      !! Wertebereich fuer Teilprozess: Berg- und Felssturz 
      IWCodeBergFelssturz = (
        rot_stark_30,
        rot_stark_100,
        rot_stark_300,
        restgefaehrdung_stark
      ) ORDERED;

      !! Wertebereich fuer Permanente Rutschung, Absenkung, Einsturz 
      IWCodePermanent = (
        rot_stark_permanent,
        blau_mittel_permanent,
        gelb_schwach_permanent,
        restgefaehrdung_stark,
        restgefaehrdung_mittel,
        restgefaehrdung_schwach
      ) ORDERED;

      !! Wertebereich fuer Absenkung und Einsturz 
      IWCodeAbsenkungEinsturz = (
        blau_mittel_permanent,
        gelb_schwach_permanent
      ) ORDERED;

    !! Beschreibung der Prozessquelle 
    CLASS Prozessquelle =
      !! Innerhalb Teilauftrag eindeutiger Name der Prozessquelle. Bsp.: Dorfbach
      Kennung : MANDATORY TEXT*80;
      Bemerkung : MTEXT*255;
    END Prozessquelle;

    /* Informationen zu Form und Ausdehnung der Prozessquelle SteinBlockschlag fuer die entsprechende Jährlichkeit
     */
    CLASS PQ_Jaehrlichkeit_SteinBlockschlag =
      Jaehrlichkeit : MANDATORY Jaehrlichkeit;
      Polygon : MANDATORY Einzelflaeche;
      !! Beschreibung der Geologie 
      Beschr_Geologie : MANDATORY MTEXT*255;  
      Form : MANDATORY AspektForm;
      Volumen : MANDATORY 0.000 .. 999999999.999 [Units.m3];
    END PQ_Jaehrlichkeit_SteinBlockschlag;

    /* Informationen zu Form und Ausdehnung der Prozessquelle BergFelssturz fuer die entsprechende Jährlichkeit
     */
    CLASS PQ_Jaehrlichkeit_BergFelssturz =
      Jaehrlichkeit : MANDATORY Jaehrlichkeit;
      Polygon : MANDATORY Einzelflaeche;
      !! Beschreibung der Geologie 
      Beschr_Geologie : MANDATORY MTEXT*255;  
      Form : MANDATORY AspektForm;
      Volumen : MANDATORY 0 .. 999999999 [Units.m3];
    END PQ_Jaehrlichkeit_BergFelssturz;

    CLASS PQ_Jaehrlichkeit_Rutsch_Mure_Base (ABSTRACT) = 
      Jaehrlichkeit : MANDATORY Jaehrlichkeit;
      Polygon : MANDATORY Einzelflaeche;
      Beschr_Lockermaterial : MANDATORY MTEXT*255;
      Mob_Schicht_Machtigkeit : MANDATORY 0.0 .. 999.0 [INTERLIS.m];
      Krit_Hangneigung : MANDATORY 0..90 [Units.Angle_Degree];
    END PQ_Jaehrlichkeit_Rutsch_Mure_Base;

    /* Informationen zu Ausdehnung, ... der Prozessquelle SpontaneRutschung fuer die entsprechende Jährlichkeit
     */
    CLASS PQ_Jaehrlichkeit_SpontaneRutschung
      EXTENDS PQ_Jaehrlichkeit_Rutsch_Mure_Base = 
    END PQ_Jaehrlichkeit_SpontaneRutschung;

    /* Informationen zu Ausdehnung, ... der Prozessquelle Hangmure fuer die entsprechende Jährlichkeit
     */
    CLASS PQ_Jaehrlichkeit_Hangmure
      EXTENDS PQ_Jaehrlichkeit_Rutsch_Mure_Base = 
    END PQ_Jaehrlichkeit_Hangmure;

    /* Abstrakte Klasse fuer Befunde.
       Prozess Wasser: Ueberschwemmung statisch/dynamisch, Uebermurung, Ufererosion
       Prozess Rutsch: Hangmure, Spontane/Permanente Rutschung
       Prozess Sturz: Stein-/Blockschlag, Berg-/Felssturz
       Prozess Einsturz/Absenkung: Einsturz, Absenkung
       Konkretisiert werden die Befunde durch saemtliche Teilprozesse, Kennwerte fuer Wasserprozesse und freie Befunde mit Jaehrlichkeit. */
    CLASS Befund_Basis (ABSTRACT) =
      Geometrie : MANDATORY SURFACE WITH (STRAIGHTS) VERTEX GeometryCHLV95_V1.Coord2 WITHOUT OVERLAPS > 0.1;
      RestgefaehrdungJaehrlichkeit : JaehrlichkeitRestgefaehrdung;
      Bemerkung : MTEXT*255;
      !!@ name = "CheckBefundKeineLoecher"
      !!@ ilivalid.msg_de = "In der Befund-Geometrie sind keine Loecher erlaubt!"  
      MANDATORY CONSTRAINT GeoW_FunctionsExt.GetInnerRingsCount(THIS, "Geometrie") == 0; 
      !!@ name = "CheckBefundFlaechenGroesse"
      !!@ ilivalid.msg_de = "Der Befund muss groesser als 100m2 sein!"  
      MANDATORY CONSTRAINT GeoW_FunctionsExt.GetArea(THIS, "Geometrie") > 100;
    END Befund_Basis;

    /* Basisklasse fuer alle direkt der geometrielosen Prozessquelle zugewiesenen Befunde */
    CLASS Befund_TextPQ (ABSTRACT) 
      EXTENDS Befund_Basis = 
    END Befund_TextPQ;

    !! Konkretisiert die Klasse Befund. Prozessquelle -> Hauptprozess muss Einsturz/Absenkung sein 
    CLASS BefundAbsenkung
    EXTENDS Befund_TextPQ =
        IWCode : MANDATORY IWCodeAbsenkungEinsturz;
    END BefundAbsenkung;

    !! Konkretisiert die Klasse Befund. Prozessquelle -> Hauptprozess muss Einsturz/Absenkung sein 
    CLASS BefundEinsturz
    EXTENDS Befund_TextPQ = 
        IWCode : MANDATORY IWCodeAbsenkungEinsturz;
    END BefundEinsturz; 

    !! Konkretisiert die Klasse Befund. Prozessquelle -> Hauptprozess muss Sturz sein 
    CLASS BefundSteinBlockschlag
    EXTENDS Befund_Basis =
      IWCode : MANDATORY IWCodeSteinBlockschlag;
    END BefundSteinBlockschlag;
    
    !! Konkretisiert die Klasse Befund. Prozessquelle -> Hauptprozess muss Sturz sein 
    CLASS BefundBergFelssturz
    EXTENDS Befund_Basis =   
      IWCode : MANDATORY IWCodeBergFelssturz;
    END BefundBergFelssturz;

    !! Konkretisiert die Klasse Befund. Prozessquelle -> Hauptprozess muss Rutsch sein 
    CLASS BefundHangmure
    EXTENDS Befund_Basis =
      IWCode : MANDATORY IWCodeStandard;
    END BefundHangmure;
    
    !! Konkretisiert die Klasse Befund.
    /* Fuer den Teilprozess permanente Rutschung sind die Kennwerte zu Rutschgeschwindigkeit, Tiefe der Gleitflaeche, Differentialbewegung, Beschleunigung und Korrekturwerte anzugeben.
    Konkretisiert die Klasse Befund. Prozessquelle -> Hauptprozess muss Rutsch sein */
    CLASS BefundPermanenteRutschung
    EXTENDS Befund_TextPQ =
      Rutschgeschwindigkeit : MANDATORY rRutschgeschwindigkeit;
      Tiefe_Gleitflaeche : MANDATORY rTiefeGleitflaeche;
      Differentialbewegung : MANDATORY rDifferentialbewegung;
      Beschleunigung : MANDATORY rBeschleunigung;
      Korrektur : MANDATORY rKorrektur;
      IWCode : MANDATORY IWCodePermanent;
    END BefundPermanenteRutschung;

    !! Konkretisiert die Klasse Befund. Prozessquelle -> Hauptprozess muss Rutsch sein 
    CLASS BefundSpontaneRutschung
    EXTENDS Befund_Basis =
      IWCode : MANDATORY IWCodeStandard;
    END BefundSpontaneRutschung;
    
    !! Konkretisiert die Klasse Befund. Prozessquelle -> Hauptprozess muss Wasser sein 
    CLASS BefundUebermurung
    EXTENDS Befund_TextPQ =
      IWCode : MANDATORY IWCodeUebermurung;
    END BefundUebermurung;
    
    !! Konkretisiert die Klasse Befund. Prozessquelle -> Hauptprozess muss Wasser sein 
    CLASS BefundUeberschwemmungDynamisch
    EXTENDS Befund_TextPQ =
      IWCode : MANDATORY IWCodeStandard;
    END BefundUeberschwemmungDynamisch;
    
    !! Konkretisiert die Klasse Befund. Prozessquelle -> Hauptprozess muss Wasser sein 
    CLASS BefundUeberschwemmungStatisch
    EXTENDS Befund_TextPQ =
      IWCode : MANDATORY IWCodeStandard;
    END BefundUeberschwemmungStatisch;
    
    !! Konkretisiert die Klasse Befund. Prozessquelle -> Hauptprozess muss Wasser sein 
    CLASS BefundUfererosion
    EXTENDS Befund_TextPQ =
    END BefundUfererosion;

    !! Befunde fuer freie Jaehrlichkeit. Hier sind Jaehrlichkeit, Intensitaet Teilprozess anzugeben. 
    CLASS BefundJaehrlichkeit
    EXTENDS Befund_TextPQ =
      Jaehrlichkeit : MANDATORY Jaehrlichkeit; 
      Intensitaet : MANDATORY Intensitaet;  
      Teilprozess : MANDATORY Teilprozess;
    END BefundJaehrlichkeit;

    /* Befunde mit Kennwert (Fliesstiefe) fuer Prozess Ueberschwemmung
       Prozessquelle -> Hauptprozess muss Wasser sein */
    CLASS KennwertUeberschwemmungFliesstiefe
    EXTENDS Befund_TextPQ =
      !! Moegliche Werte gemaess wFliesstiefe. Es sind gemaess Auftrag die Standard- oder detaillierten Werte abzufuellen. 
      h : MANDATORY wFliesstiefeUeberschwemmung;
      Jaehrlichkeit : MANDATORY JaehrlichkeitListe;
    END KennwertUeberschwemmungFliesstiefe;

    /* Befunde mit Kennwert (Fliessgeschwindigkeit) fuer Prozess Ueberschwemmung
       Prozessquelle -> Hauptprozess muss Wasser sein */
    CLASS KennwertUeberschwemmungFliessgeschwindigkeit
    EXTENDS Befund_TextPQ =
      !! Moegliche Werte gemaess wUeberschwemmungFliessgeschwindigkeit. Es sind gemaess Auftrag die Standard- oder detaillierten Werte abzufuellen. */
      v : MANDATORY wUeberschwemmungFliessgeschwindigkeit;
      Jaehrlichkeit : MANDATORY JaehrlichkeitListe;
    END KennwertUeberschwemmungFliessgeschwindigkeit;

    /* Befunde mit Kennwert (Fliesstiefe) fuer Prozess Uebermurung
       Prozessquelle -> Hauptprozess muss Wasser sein */
    CLASS KennwertUebermurungFliesstiefe
    EXTENDS Befund_TextPQ =
      !! Moegliche Werte gemaess wFliesstiefe. Es sind gemaess Auftrag die Standard- oder detaillierten Werte abzufuellen.
      h : MANDATORY wFliesstiefeUebermurung;
      Jaehrlichkeit : MANDATORY JaehrlichkeitListe;
    END KennwertUebermurungFliesstiefe;

    /* Befunde mit Kennwert (Fliessgeschwindigkeit) fuer Prozess Uebermurung
       Prozessquelle -> Hauptprozess muss Wasser sein */
    CLASS KennwertUebermurungFliessgeschwindigkeit
    EXTENDS Befund_TextPQ =
      !! Moegliche Werte gemaess wUebermurungFliessgeschwindigkeit. Es sind gemaess Auftrag die Standard- oder detaillierten Werte abzufuellen.   
      v : MANDATORY wUebermurungFliessgeschwindigkeit;
      Jaehrlichkeit : MANDATORY JaehrlichkeitListe;
    END KennwertUebermurungFliessgeschwindigkeit;
    
    ASSOCIATION Teilauftrag__Prozessquelle =
      /* Ein Teilauftrag hat entweder keine oder eine Prozessquelle.
         Hat ein Teilauftrag KEINE Prozessquelle, ist durch den Auftragnehmer eine Prozessquelle zu definieren. */
      Prozessquelle_R -- {0..*} Prozessquelle;
      Teilauftrag_R (EXTERNAL) -- {1} SO_AFU_Naturgefahren_20230802.Auftraege.Teilauftrag;
    END Teilauftrag__Prozessquelle;

    ASSOCIATION PQ_Jaehrlichkeit_SteinBlockschlag__Prozessquelle =
      PQ_Jaehrlichkeit_SteinBlockschlag_R -- {0..*} PQ_Jaehrlichkeit_SteinBlockschlag;
      Prozessquelle_R -<> {1} Prozessquelle;
      !!@ name = "CheckBefundSteinBlockschlag"  
      !!@ ilivalid.msg_de = "Zugordneter Befund passt nicht zum Hauptprozess!"
      MANDATORY CONSTRAINT Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Sturz;
    END PQ_Jaehrlichkeit_SteinBlockschlag__Prozessquelle;

    ASSOCIATION PQ_Jaehrlichkeit_SpontaneRutschung__Prozessquelle =
      PQ_Jaehrlichkeit_SpontaneRutschung_R -- {0..*} PQ_Jaehrlichkeit_SpontaneRutschung;
      Prozessquelle_R -<> {1} Prozessquelle;
      !!@ name = "CheckBefundSpontaneRutschung"  
      !!@ ilivalid.msg_de = "Zugordneter Befund passt nicht zum Hauptprozess!"
      MANDATORY CONSTRAINT Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Rutschung;
    END PQ_Jaehrlichkeit_SpontaneRutschung__Prozessquelle;

    ASSOCIATION PQ_Jaehrlichkeit_Hangmure__Prozessquelle =
      PQ_Jaehrlichkeit_Hangmure_R -- {0..*} PQ_Jaehrlichkeit_Hangmure;
      Prozessquelle_R -<> {1} Prozessquelle;
      !!@ name = "CheckBefundHangmure"  
      !!@ ilivalid.msg_de = "Zugordneter Befund passt nicht zum Hauptprozess!"
      MANDATORY CONSTRAINT Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Rutschung;
    END PQ_Jaehrlichkeit_Hangmure__Prozessquelle;

    ASSOCIATION PQ_Jaehrlichkeit_BergFelssturz__Prozessquelle =
      PQ_Jaehrlichkeit_BergFelssturz_R -- {0..*} PQ_Jaehrlichkeit_BergFelssturz;
      Prozessquelle_R -<> {1} Prozessquelle;
      !!@ name = "CheckBefundBergFelssturz"  
      !!@ ilivalid.msg_de = "Zugordneter Befund passt nicht zum Hauptprozess!"
      MANDATORY CONSTRAINT Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Sturz;
    END PQ_Jaehrlichkeit_BergFelssturz__Prozessquelle;

    ASSOCIATION PQ_Jaehrlichkeit_SteinBlockschlag__BefundSteinBlockschlag =
      BefundSteinBlockschlag_R -- {1..*} BefundSteinBlockschlag;
      PQ_Jaehrlichkeit_SteinBlockschlag_R -- {1} PQ_Jaehrlichkeit_SteinBlockschlag;
    END PQ_Jaehrlichkeit_SteinBlockschlag__BefundSteinBlockschlag;

    ASSOCIATION PQ_Jaehrlichkeit_SpontaneRutschung__BefundSpontaneRutschung =
      BefundSpontaneRutschung_R -- {1..*} BefundSpontaneRutschung;
      PQ_Jaehrlichkeit_SpontaneRutschung_R -- {1} PQ_Jaehrlichkeit_SpontaneRutschung;
    END PQ_Jaehrlichkeit_SpontaneRutschung__BefundSpontaneRutschung;

    ASSOCIATION PQ_Jaehrlichkeit_Hangmure__BefundHangmure =
      BefundHangmure_R -- {1..*} BefundHangmure;
      PQ_Jaehrlichkeit_Hangmure_R -- {1} PQ_Jaehrlichkeit_Hangmure;
    END PQ_Jaehrlichkeit_Hangmure__BefundHangmure;

    ASSOCIATION PQ_Jaehrlichkeit_BergFelssturz__BefundBergFelssturz =
      BefundBergFelssturz_R -- {1..*} BefundBergFelssturz;
      PQ_Jaehrlichkeit_BergFelssturz_R -- {1} PQ_Jaehrlichkeit_BergFelssturz;
    END PQ_Jaehrlichkeit_BergFelssturz__BefundBergFelssturz;

    ASSOCIATION Prozessquelle__Befund_TextPQ =
      Befund_TextPQ_R -- {0..*} Befund_TextPQ;
      Prozessquelle_R -- {1} Prozessquelle;
    
      !!@ name = "CheckWasserkennwerte"  
      !!@ ilivalid.msg_de = "Es muss mindestens ein Objekt jeder Kennwert-Klasse verknuepft sein, da Wasserkennwerte auf TRUE gesetzt ist."
      MANDATORY CONSTRAINT Prozessquelle_R->Teilauftrag_R->Wasserkennwerte AND INTERLIS.objectCount(Befund_TextPQ_R) >= 1;

    END Prozessquelle__Befund_TextPQ;

    !! Fliessrichtungspfeile zeigen die Richtung des Wassers an 
    CLASS Fliessrichtungspfeil =
      Geometrie : MANDATORY GeometryCHLV95_V1.Coord2;
      Azimuth : MANDATORY GeometryCHLV95_V1.Orientation;
      Jaehrlichkeit : MANDATORY JaehrlichkeitListe;
    END Fliessrichtungspfeil;

    ASSOCIATION Prozessquelle__Fliessrichtungspfeil =
      Fliessrichtungspfeil_R -- {0..*} Fliessrichtungspfeil;
      Prozessquelle_R -- {1} Prozessquelle;
      !!@ name = "CheckFliessrichtungspfeilZuHauptprozess"
      !!@ ilivalid.msg_de = "R-Pfeile duerfen nur Hauptprozess Wasser zugeordnet sein!"
      MANDATORY CONSTRAINT Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Wasser AND DEFINED(Fliessrichtungspfeil_R);
    END Prozessquelle__Fliessrichtungspfeil;

    CONSTRAINTS OF BefundSteinBlockschlag =
      !!@ name = "CheckFliessrichtungspfeilHauptprozess"
      !!@ ilivalid.msg_de = "BefundSteinBlockschlag muss Hauptprozess>Sturz zugeordnet sein"
      MANDATORY CONSTRAINT PQ_Jaehrlichkeit_SteinBlockschlag_R->Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Sturz;
      !!@ name = "CheckBefundSteinBlockschlagKeineUeberragung"
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleichem IWCode und Prozessquelle!"
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "PQ_Jaehrlichkeit_SteinBlockschlag_R->Prozessquelle_R"), "Geometrie" ,"IWCode");
      !!@ name = "CheckBefundSteinBlockschlagJaehrlichkeit-30"
      !!@ ilivalid.msg_de = "Die Jaehrlichkeit stimmt nicht mit der Jaehrlichkeit der Prozessquelle ueberein!"
      MANDATORY CONSTRAINT NOT((IWCode == #rot_stark_30) OR (IWCode == #rot_mittel_30) OR (IWCode == #blau_schwach_30)) OR (PQ_Jaehrlichkeit_SteinBlockschlag_R->Jaehrlichkeit == 30);
      !!@ name = "CheckBefundSteinBlockschlagJaehrlichkeit-100"
      !!@ ilivalid.msg_de = "Die Jaehrlichkeit stimmt nicht mit der Jaehrlichkeit der Prozessquelle ueberein!"
      MANDATORY CONSTRAINT NOT((IWCode == #rot_stark_100) OR (IWCode == #blau_mittel_100)) OR (PQ_Jaehrlichkeit_SteinBlockschlag_R->Jaehrlichkeit == 100);
      !!@ name = "CheckBefundSteinBlockschlagJaehrlichkeit-300"
      !!@ ilivalid.msg_de = "Die Jaehrlichkeit stimmt nicht mit der Jaehrlichkeit der Prozessquelle ueberein!"
      MANDATORY CONSTRAINT NOT((IWCode == #rot_stark_300) OR (IWCode == #blau_mittel_300)) OR (PQ_Jaehrlichkeit_SteinBlockschlag_R->Jaehrlichkeit == 300);
      !!@ name = "CheckBefundSteinBlockschlagImAbklPerimeter"
      !!@ ilivalid.msg_de = "Befund liegt nicht innerhalb des Abklärungsperimeters!"  
      MANDATORY CONSTRAINT (GeoW_FunctionsExt.IsInside(GeoW_FunctionsExt.Union(PQ_Jaehrlichkeit_SteinBlockschlag_R->Prozessquelle_R->Teilauftrag_R->Abklaerungsperimeter_R, "Geometrie"), THIS, "Geometrie"));      
    END;

    CONSTRAINTS OF BefundBergFelssturz =
      !!@ name = "CheckBefundBergFelssturzHauptprozess"
      !!@ ilivalid.msg_de = "BefundBergFelssturz muss Hauptprozess>Sturz zugeordnet sein"
      MANDATORY CONSTRAINT PQ_Jaehrlichkeit_BergFelssturz_R->Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Sturz;
      !!@ name = "BefundBergFelssturzKeineUeberragung"
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleichem IWCode und Prozessquelle!"
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "PQ_Jaehrlichkeit_BergFelssturz_R->Prozessquelle_R"), "Geometrie" ,"IWCode");
      !!@ name = "CheckBefundBergFelssturzImAbklPerimeter"
      !!@ ilivalid.msg_de = "Befund liegt nicht innerhalb des Abklärungsperimeters!"  
      MANDATORY CONSTRAINT (GeoW_FunctionsExt.IsInside(GeoW_FunctionsExt.Union(PQ_Jaehrlichkeit_BergFelssturz_R->Prozessquelle_R->Teilauftrag_R->Abklaerungsperimeter_R, "Geometrie"), THIS, "Geometrie"));   
    END;

    CONSTRAINTS OF BefundHangmure =
      !!@ name = "CheckBefundHangmureHauptprozess"
      !!@ ilivalid.msg_de = "BefundHangmure muss Hauptprozess>Rutschung zugeordnet sein"
      MANDATORY CONSTRAINT PQ_Jaehrlichkeit_Hangmure_R->Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Rutschung;
      !!@ name = "BefundHangmureKeineUeberragung"
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleichem IWCode und Prozessquelle!" 
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum (GeoW_FunctionsExt.GetInGroups(ALL, "PQ_Jaehrlichkeit_Hangmure_R->Prozessquelle_R"), "Geometrie" ,"IWCode");
      !!@ name = "CheckBefundHangmureJaehrlichkeit-30"
      !!@ ilivalid.msg_de = "Die Jaehrlichkeit stimmt nicht mit der Jaehrlichkeit der Prozessquelle ueberein!"
      MANDATORY CONSTRAINT NOT((IWCode == #rot_stark_30) OR (IWCode == #rot_mittel_30) OR (IWCode == #blau_schwach_30)) OR (PQ_Jaehrlichkeit_Hangmure_R->Jaehrlichkeit == 30);
      !!@ name = "CheckBefundHangmureJaehrlichkeit-100"
      !!@ ilivalid.msg_de = "Die Jaehrlichkeit stimmt nicht mit der Jaehrlichkeit der Prozessquelle ueberein!"
      MANDATORY CONSTRAINT NOT((IWCode == #rot_stark_100) OR (IWCode == #blau_mittel_100)) OR (PQ_Jaehrlichkeit_Hangmure_R->Jaehrlichkeit == 100);
      !!@ name = "CheckBefundHangmureJaehrlichkeit-300"
      !!@ ilivalid.msg_de = "Die Jaehrlichkeit stimmt nicht mit der Jaehrlichkeit der Prozessquelle ueberein!"
      MANDATORY CONSTRAINT NOT((IWCode == #rot_stark_300) OR (IWCode == #blau_mittel_300)) OR (PQ_Jaehrlichkeit_Hangmure_R->Jaehrlichkeit == 300); 
      !!@ name = "CheckBefundHangmureImAbklPerimeter"
      !!@ ilivalid.msg_de = "Befund liegt nicht innerhalb des Abklärungsperimeters!"  
      MANDATORY CONSTRAINT (GeoW_FunctionsExt.IsInside(GeoW_FunctionsExt.Union(PQ_Jaehrlichkeit_Hangmure_R->Prozessquelle_R->Teilauftrag_R->Abklaerungsperimeter_R, "Geometrie"), THIS, "Geometrie")); 
    END;
   
    CONSTRAINTS OF BefundUfererosion =
      !!@ name = "CheckBefundUfererosionHauptprozess"
      !!@ ilivalid.msg_de = "BefundUfererosion muss Hauptprozess>Wasser zugeordnet sein"
      MANDATORY CONSTRAINT Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Wasser;
      !!@ name = "CheckBefundUfererosionImAbklPerimeter"
      !!@ ilivalid.msg_de = "Befund liegt nicht innerhalb des Abklärungsperimeters!"  
      MANDATORY CONSTRAINT (GeoW_FunctionsExt.IsInside(GeoW_FunctionsExt.Union(Prozessquelle_R->Teilauftrag_R->Abklaerungsperimeter_R, "Geometrie"), THIS, "Geometrie")); 
    END;
  
    CONSTRAINTS OF BefundAbsenkung =
      !!@ name = "CheckBefundAbsenkungHauptprozess"
      !!@ ilivalid.msg_de = "BefundAbsenkung muss Hauptprozess>Absenkung_Einsturz zugeordnet sein" 
      MANDATORY CONSTRAINT Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Absenkung_Einsturz;
      !!@ name = "CheckBefundAbsenkungKeineUeberragung"
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleichem IWCode und Prozessquelle!"
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "Prozessquelle_R"), "Geometrie" ,"IWCode");
      !!@ name = "CheckBefundAbsenkungImAbklPerimeter"
      !!@ ilivalid.msg_de = "Befund liegt nicht innerhalb des Abklärungsperimeters!"  
      MANDATORY CONSTRAINT (GeoW_FunctionsExt.IsInside(GeoW_FunctionsExt.Union(Prozessquelle_R->Teilauftrag_R->Abklaerungsperimeter_R, "Geometrie"), THIS, "Geometrie")); 
    END;
   
    CONSTRAINTS OF BefundEinsturz =
      !!@ name = "CheckBefundEinsturzHauptprozess"
      !!@ ilivalid.msg_de = "BefundEinsturz muss Hauptprozess>Absenkung_Einsturz zugeordnet sein"
      MANDATORY CONSTRAINT Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Absenkung_Einsturz;
      !!@ name = "CheckBefundEinsturzKeineUeberragung"
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleichem IWCode und Prozessquelle!"  
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "Prozessquelle_R"), "Geometrie" ,"IWCode");
      !!@ name = "CheckBefundEinsturzImAbklPerimeter"
      !!@ ilivalid.msg_de = "Befund liegt nicht innerhalb des Abklärungsperimeters!"  
      MANDATORY CONSTRAINT (GeoW_FunctionsExt.IsInside(GeoW_FunctionsExt.Union(Prozessquelle_R->Teilauftrag_R->Abklaerungsperimeter_R, "Geometrie"), THIS, "Geometrie")); 
    END;

    CONSTRAINTS OF BefundPermanenteRutschung =
      !!@ name = "CheckBefundPermanenteRutschungHauptprozess"
      !!@ ilivalid.msg_de = "BefundPermanenteRutschung muss Hauptprozess>Rutschung zugeordnet sein" 
      MANDATORY CONSTRAINT Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Rutschung;
      !!@ name = "CheckBefundPermanenteRutschungImAbklPerimeter"
      !!@ ilivalid.msg_de = "Befund liegt nicht innerhalb des Abklärungsperimeters!"  
      MANDATORY CONSTRAINT (GeoW_FunctionsExt.IsInside(GeoW_FunctionsExt.Union(Prozessquelle_R->Teilauftrag_R->Abklaerungsperimeter_R, "Geometrie"), THIS, "Geometrie")); 
    END;   

    CONSTRAINTS OF BefundSpontaneRutschung =
      !!@ name = "CheckBefundSpontaneRutschungHauptprozess"
      !!@ ilivalid.msg_de = "BefundSpontaneRutschung muss Hauptprozess>Rutschung zugeordnet sein"
      MANDATORY CONSTRAINT PQ_Jaehrlichkeit_SpontaneRutschung_R->Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Rutschung;
      !!@ name = "CheckBefundSpontaneRutschungKeineUeberragung"
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleichem IWCode und Prozessquelle!"  
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "PQ_Jaehrlichkeit_SpontaneRutschung_R->Prozessquelle_R"), "Geometrie" ,"IWCode");
      !!@ name = "CheckBefundSpontaneRutschungJaehrlichkeit-30"
      !!@ ilivalid.msg_de = "Die Jaehrlichkeit stimmt nicht mit der Jaehrlichkeit der Prozessquelle ueberein!"
      MANDATORY CONSTRAINT NOT((IWCode == #rot_stark_30) OR (IWCode == #rot_mittel_30) OR (IWCode == #blau_schwach_30)) OR (PQ_Jaehrlichkeit_SpontaneRutschung_R->Jaehrlichkeit == 30);
      !!@ name = "CheckBefundSpontaneRutschungJaehrlichkeit-100"
      !!@ ilivalid.msg_de = "Die Jaehrlichkeit stimmt nicht mit der Jaehrlichkeit der Prozessquelle ueberein!"
      MANDATORY CONSTRAINT NOT((IWCode == #rot_stark_100) OR (IWCode == #blau_mittel_100)) OR (PQ_Jaehrlichkeit_SpontaneRutschung_R->Jaehrlichkeit == 100);
      !!@ name = "CheckBefundSpontaneRutschungJaehrlichkeit-300"
      !!@ ilivalid.msg_de = "Die Jaehrlichkeit stimmt nicht mit der Jaehrlichkeit der Prozessquelle ueberein!"
      MANDATORY CONSTRAINT NOT((IWCode == #rot_stark_300) OR (IWCode == #blau_mittel_300)) OR (PQ_Jaehrlichkeit_SpontaneRutschung_R->Jaehrlichkeit == 300); 
      !!@ name = "CheckBefundSpontaneRutschungImAbklPerimeter"
      !!@ ilivalid.msg_de = "Befund liegt nicht innerhalb des Abklärungsperimeters!"  
      MANDATORY CONSTRAINT (GeoW_FunctionsExt.IsInside(GeoW_FunctionsExt.Union(PQ_Jaehrlichkeit_SpontaneRutschung_R->Prozessquelle_R->Teilauftrag_R->Abklaerungsperimeter_R, "Geometrie"), THIS, "Geometrie")); 
    END;      

    CONSTRAINTS OF BefundUebermurung =
      !!@ name = "CheckBefundUebermurungHauptprozess"
      !!@ ilivalid.msg_de = "BefundUebermurung muss Hauptprozess>Wasser zugeordnet sein" 
      MANDATORY CONSTRAINT Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Wasser;
      !!@ name = "CheckBefundUebermurungKeineUeberragung"
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleichem IWCode und Prozessquelle!"  
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "Prozessquelle_R"), "Geometrie" ,"IWCode");
      !!@ name = "CheckBefundUebermurungImAbklPerimeter"
      !!@ ilivalid.msg_de = "Befund liegt nicht innerhalb des Abklärungsperimeters!"  
      MANDATORY CONSTRAINT (GeoW_FunctionsExt.IsInside(GeoW_FunctionsExt.Union(Prozessquelle_R->Teilauftrag_R->Abklaerungsperimeter_R, "Geometrie"), THIS, "Geometrie")); 
    END;
    
    CONSTRAINTS OF BefundUeberschwemmungDynamisch =
      !!@ name = "CheckBefundUeberschwemmungDynamischHauptprozess"
      !!@ ilivalid.msg_de = "BefundUeberschwemmungDynamisch muss Hauptprozess>Wasser zugeordnet sein"
      MANDATORY CONSTRAINT Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Wasser;
      !!@ name = "CheckBefundUeberschwemmungDynamischKeineUeberragung"
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleichem IWCode und Prozessquelle!"  
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "Prozessquelle_R"), "Geometrie" ,"IWCode");
      !!@ name = "CheckBefundUeberschwemmungDynamischImAbklPerimeter"
      !!@ ilivalid.msg_de = "Befund liegt nicht innerhalb des Abklärungsperimeters!"  
      MANDATORY CONSTRAINT (GeoW_FunctionsExt.IsInside(GeoW_FunctionsExt.Union(Prozessquelle_R->Teilauftrag_R->Abklaerungsperimeter_R, "Geometrie"), THIS, "Geometrie")); 
    END;
       
    CONSTRAINTS OF BefundUeberschwemmungStatisch =
      !!@ name = "CheckBefundUeberschwemmungStatischHauptprozess"
      !!@ ilivalid.msg_de = "BefundUeberschwemmungStatisch muss Hauptprozess>Wasser zugeordnet sein"
      MANDATORY CONSTRAINT Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Wasser;
      !!@ name = "CheckBefundUeberschwemmungStatischKeineUeberragung"
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleichem IWCode und Prozessquelle!"    
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "Prozessquelle_R"), "Geometrie" ,"IWCode");
      !!@ name = "CheckBefundUeberschwemmungStatischImAbklPerimeter"
      !!@ ilivalid.msg_de = "Befund liegt nicht innerhalb des Abklärungsperimeters!"  
      MANDATORY CONSTRAINT (GeoW_FunctionsExt.IsInside(GeoW_FunctionsExt.Union(Prozessquelle_R->Teilauftrag_R->Abklaerungsperimeter_R, "Geometrie"), THIS, "Geometrie")); 
    END;
     
    CONSTRAINTS OF BefundJaehrlichkeit =
      !!@ name = "CheckBefundBefundJaehrlichkeitHauptprozess"
      !!@ ilivalid.msg_de = "BefundJaehrlichkeit muss Hauptprozess>Wasser zugeordnet sein"  
      !!MANDATORY CONSTRAINT Prozessquelle_R->Teilauftrag_R->Hauptprozess == #Sturz; !!offene Frage
      !!@ name = "CheckBefundBefundJaehrlichkeitFlaechendeckung"
      !!@ ilivalid.msg_de = "BefundJaehrlichkeit ist nicht flächendeckend!"  
      SET CONSTRAINT INTERLIS_ext.areAreas3(ALL,>Prozessquelle,"Geometrie");
      !!@ name = "CheckBefundJaehrlichkeitKeineUeberragung"  
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleicher Jaehrlichkeit und Prozessquelle!"
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "Prozessquelle_R"), "Geometrie" ,"Jaehrlichkeit");
      !!@ name = "CheckBefundJaehrlichkeitImAbklPerimeter"
      !!@ ilivalid.msg_de = "Befund liegt nicht innerhalb des Abklärungsperimeters!"  
      MANDATORY CONSTRAINT (GeoW_FunctionsExt.IsInside(GeoW_FunctionsExt.Union(Prozessquelle_R->Teilauftrag_R->Abklaerungsperimeter_R, "Geometrie"), THIS, "Geometrie")); 
    END;

    CONSTRAINTS OF KennwertUeberschwemmungFliesstiefe =
      !!@ name = "CheckKennwertUeberschwemmungFliesstiefeKeineUeberragungH"  
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleicher Fliesstiefe und Prozessquelle!" 
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "Prozessquelle_R"), "Geometrie" ,"h");
      !!@ name = "CheckKennwertUeberschwemmungFliesstiefeKeineUeberragungJaehrlichkeit"  
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleicher Jaehrlichkeit und Prozessquelle!"  
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "Prozessquelle_R"), "Geometrie" ,"Jaehrlichkeit");
    END;

    CONSTRAINTS OF KennwertUeberschwemmungFliessgeschwindigkeit =
      !!@ name = "CheckKennwertUeberschwemmungFliessgeschwindigkeitKeineUeberragungH" 
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleicher Jaehrlichkeit und Prozessquelle!"
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "Prozessquelle_R"), "Geometrie" ,"Jaehrlichkeit");
    END;

    CONSTRAINTS OF KennwertUebermurungFliesstiefe =
      !!@ name = "CheckKennwertUebermurungFliesstiefeKeineUeberragungH" 
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleicher Fliesstiefe und Prozessquelle!" 
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "Prozessquelle_R"), "Geometrie" ,"h");
      !!@ name = "CheckKennwertUebermurungFliesstiefeKeineUeberragungJaehrlichkeit"  
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleicher Jaehrlichkeit und Prozessquelle!"  
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "Prozessquelle_R"), "Geometrie" ,"Jaehrlichkeit"); 
    END;

    CONSTRAINTS OF KennwertUebermurungFliessgeschwindigkeit =
      !!@ name = "CheckKennwertUebermurungFliessgeschwindigkeitKeineUeberragungH" 
      !!@ ilivalid.msg_de = "ungueltige Ueberragung bei Befund mit gleicher Jaehrlichkeit und Prozessquelle!"   
      SET CONSTRAINT GeoW_FunctionsExt.IsInsideAreaByCodeEnum(GeoW_FunctionsExt.GetInGroups(ALL, "Prozessquelle_R"), "Geometrie" ,"Jaehrlichkeit");
    END;

    CONSTRAINTS OF Prozessquelle =
      !!@ name = "CheckProzessquelleBefundJaehrlichkeit" 
      !!@ ilivalid.msg_de = "Eine Prozessquelle muss mit mindestens einem Objekt der Subklassen von Befund_TextPQ oder einem Objekt der PQ_Jaehrlichkeit_*-Klassen verknuepft sein!"  
      MANDATORY CONSTRAINT DEFINED(Befund_TextPQ_R) OR (DEFINED(PQ_Jaehrlichkeit_SteinBlockschlag_R) OR DEFINED(PQ_Jaehrlichkeit_SpontaneRutschung_R) OR DEFINED(PQ_Jaehrlichkeit_Hangmure_R));
      !!@ name = "CheckProzessquelleKennung"       
      !!@ ilivalid.msg_de = "Die Kennung ist innerhalb dieses Teilauftrags nicht eindeutig!"  
      UNIQUE Kennung, Teilauftrag_R;
    END;

    !! Hilfsview fuer Constraint
    VIEW Helper_BefundUeberschwemmung
      UNION OF BUsD ~ BefundUeberschwemmungDynamisch, BUsS ~ BefundUeberschwemmungStatisch;
      =
      Geometrie: Einzelflaeche;
    END Helper_BefundUeberschwemmung;
  END Befunde;  

END SO_AFU_Naturgefahren_20230802.